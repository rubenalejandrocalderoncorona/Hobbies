{"version":3,"sources":["webpack://gatsby-personal-site/./src/components/Content.tsx","webpack://gatsby-personal-site/./src/components/Tags/Tags.tsx","webpack://gatsby-personal-site/./src/components/Tags/index.ts","webpack://gatsby-personal-site/./src/components/Tags/TagsContainer.tsx","webpack://gatsby-personal-site/./src/pages/tags.tsx"],"names":["Wrapper","styled","props","fullHeight","theme","media","max","lg","md","sm","BottomHeight","children","tags","map","tag","key","fieldValue","to","totalCount","data","useStaticQuery","allMarkdownRemark","group","sort","a","b","siteTitle","site","siteMetadata","title","Layout","Head","keywords","Stars","normalVelocity","containerOpacity","addEventListeners","Content"],"mappings":"yKAOaA,EAAUC,yBAAH,4DAAGA,CAAH,kJASR,SAAAC,GAAK,OAAKA,EAAMC,WAAa,OAAS,UAE9C,SAAAD,GAAK,OAAIA,EAAME,MAAMC,MAAMC,IAAIC,GAA1B,mHAML,SAAAL,GAAK,OAAIA,EAAME,MAAMC,MAAMC,IAAIE,GAA1B,oGAML,SAAAN,GAAK,OAAIA,EAAME,MAAMC,MAAMC,IAAIG,GAA1B,kFAMHC,EAAeT,yBAAH,iEAAGA,CAAH,mBAgBlB,IAPwC,SAAC,GAAD,IAAEU,EAAF,EAAEA,SAAF,IAAYR,kBAAZ,gBACtC,gBAACH,EAAD,CAASG,WAAYA,GAClBQ,EACD,gBAACD,EAAD,S,6ICfJ,EAzBkC,SAAC,GAAY,IAAXE,EAAU,EAAVA,KAClC,OACE,gCACE,gBAAC,KAAD,KACE,gBAAC,KAAD,iBACA,gBAAC,KAAD,6BAEF,+BACE,gBAAC,KAAD,KACGA,GACCA,EAAKC,KACH,SAAAC,GAAG,OACDA,GACE,gBAAC,KAAD,CAAKC,IAAKD,EAAIE,WAAYC,GAAE,SAAWH,EAAIE,WAAf,KACzBF,EAAIE,WADP,MAEE,6BAAQF,EAAII,oB,UCrBhC,ECGgC,WAC9B,IAAMC,GAAOC,oBAAe,cAWtBR,EACJO,EAAKE,mBACLF,EAAKE,kBAAkBC,MAAMC,MAC3B,SAACC,EAAQC,GAAT,OAAoBA,EAAEP,WAAaM,EAAEN,cAGzC,OAAO,gBAAC,EAAD,CAAMN,KAAMA,KCyBrB,EAnC0C,SAAC,GAAY,IAC/Cc,EAD8C,EAAVP,KACnBQ,KAAKC,aAAaC,MAEzC,OACE,gBAACC,EAAA,EAAD,CAAQD,MAAOH,GACb,gBAACK,EAAA,EAAD,CACEF,MAAM,WACNG,SAAU,CAAC,OAAD,0DASZ,gBAACC,EAAA,EAAD,CACEC,eAAgB,KAChBC,iBAAkB,GAClBC,mBAAmB,IAErB,gBAACC,EAAA,EAAD,KACE,gBAAC,EAAD","file":"component---src-pages-tags-tsx-9325b67a049555232b5e.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ntype WrapperProps = {\r\n  fullHeight: boolean\r\n}\r\n\r\nexport const Wrapper = styled.div<WrapperProps>`\r\n  max-width: 68rem;\r\n  width: calc(100% - 9.25rem * 2);\r\n  margin: 11rem auto 5rem;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  height: ${props => (props.fullHeight ? '100%' : 'auto')};\r\n\r\n  ${props => props.theme.media.max.lg`\r\n    width: 1.45rem;\r\n    margin: 8rem auto 3rem;\r\n    width: calc(100% - 11rem * 2);\r\n  `}\r\n\r\n  ${props => props.theme.media.max.md`\r\n    width: 100%;\r\n    margin: 4rem auto 0;\r\n    padding: 0 3rem 6rem;\r\n  `}\r\n  \r\n  ${props => props.theme.media.max.sm`\r\n    margin: 2rem auto 0;\r\n    padding: 0 2rem 6rem;\r\n  `}\r\n`\r\n\r\nconst BottomHeight = styled.div`\r\n  height: 10rem;\r\n`\r\n\r\ninterface ContentProps {\r\n  readonly children: React.ReactNode\r\n  readonly fullHeight?: boolean\r\n}\r\n\r\nconst Content: React.FC<ContentProps> = ({children, fullHeight = true}) => (\r\n  <Wrapper fullHeight={fullHeight}>\r\n    {children}\r\n    <BottomHeight />\r\n  </Wrapper>\r\n)\r\n\r\nexport default Content\r\n","import React from 'react'\r\nimport {Tag as TagInterface} from '../../types'\r\nimport {Description, Header, ItemTags, Tag, Title} from '../../styles'\r\n\r\ninterface TagsProps {\r\n  tags: TagInterface[]\r\n}\r\n\r\nconst Tags: React.FC<TagsProps> = ({tags}) => {\r\n  return (\r\n    <>\r\n      <Header>\r\n        <Title>All tags</Title>\r\n        <Description>Tags from the works</Description>\r\n      </Header>\r\n      <article>\r\n        <ItemTags>\r\n          {tags &&\r\n            tags.map(\r\n              tag =>\r\n                tag && (\r\n                  <Tag key={tag.fieldValue} to={`/tags/${tag.fieldValue}/`}>\r\n                    {tag.fieldValue} -&nbsp;\r\n                    <small>{tag.totalCount}</small>\r\n                  </Tag>\r\n                )\r\n            )}\r\n        </ItemTags>\r\n      </article>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Tags\r\n","import TagsContainer from './TagsContainer'\r\n\r\nexport default TagsContainer\r\n","import React from 'react'\r\nimport Tags from './Tags'\r\nimport {graphql, useStaticQuery} from 'gatsby'\r\nimport {Tag} from '../../types'\r\n\r\nconst TagsContainer: React.FC = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query TagsQuery {\r\n      allMarkdownRemark(filter: {frontmatter: {published: {ne: false}}}) {\r\n        group(field: frontmatter___tags) {\r\n          fieldValue\r\n          totalCount\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const tags: Tag[] =\r\n    data.allMarkdownRemark &&\r\n    data.allMarkdownRemark.group.sort(\r\n      (a: Tag, b: Tag) => b.totalCount - a.totalCount\r\n    )\r\n\r\n  return <Tags tags={tags} />\r\n}\r\n\r\nexport default TagsContainer\r\n","import React from 'react'\r\nimport {graphql} from 'gatsby'\r\nimport Layout from '../components/Layout'\r\nimport Head from '../components/Head'\r\nimport Stars from '../components/Stars'\r\nimport Content from '../components/Content'\r\nimport Tags from '../components/Tags'\r\nimport {TitlePageQueryData} from '../types'\r\n\r\ninterface TagsPageProps {\r\n  readonly data: TitlePageQueryData\r\n}\r\n\r\nconst TagsPage: React.FC<TagsPageProps> = ({data}) => {\r\n  const siteTitle = data.site.siteMetadata.title\r\n\r\n  return (\r\n    <Layout title={siteTitle}>\r\n      <Head\r\n        title=\"All tags\"\r\n        keywords={[\r\n          `blog`,\r\n          `gatsby`,\r\n          `typescript`,\r\n          `javascript`,\r\n          `portfolio`,\r\n          `react`\r\n        ]}\r\n      />\r\n      <Stars\r\n        normalVelocity={0.0001}\r\n        containerOpacity={0.3}\r\n        addEventListeners={false}\r\n      />\r\n      <Content>\r\n        <Tags />\r\n      </Content>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      ...SiteTitle\r\n    }\r\n  }\r\n`\r\nexport default TagsPage\r\n"],"sourceRoot":""}